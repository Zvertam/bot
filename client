from datetime import datetime
from logger import debugger

from config import config
from gate_api import ApiClient, Order, SpotApi, Configuration


client = Configuration(key=config['GATEIO']['API'], secret=config['GATEIO']['API'])
spot_api = SpotApi(ApiClient(client))

last_trade = None


def get_last_price(base, quote, return_price_only):
    global last_trade
    trades = spot_api.list_trades(currency_pair=f'{base}_{quote}', limit=1)
    assert len(trades) == 1
    trade = trades[0]

    create_time_ms = datetime.utcfromtimestamp(int(trade.create_time_ms.split('.')[0]) / 1000)
    create_time_formatted = create_time_ms.strftime('%d-%m-%y %H:%M:%S.%f')

    if last_trade and last_trade.id > trade.id:
        debugger(f"Найден результат предыдущего ордера")
        return get_last_price(base=base, quote=quote, return_price_only=return_price_only)
    else:
        last_trade = trade

    if return_price_only:
        return trade.price

    debugger(f"Новейший ордер: {trade.currency_pair} | id={trade.id} | create_time={create_time_formatted} | "
                f"side={trade.side} | amount={trade.amount} | price={trade.price}")
    return trade


def get_min_amount(base, quote):
    try:
        min_amount = spot_api.get_currency_pair(currency_pair=f'{base}_{quote}').min_quote_amount
    except Exception as e:
        debugger(e)
    else:
        return min_amount


def place_order(base, quote, amount, side, last_price):
    try:
        order = Order(amount=str(float(amount) / float(last_price)), price=last_price, side=side,
                      currency_pair=f'{base}_{quote}', time_in_force='ioc')
        order = spot_api.create_order(order)
        t = order
        debugger(
            f"Создается ордер: {t.side} | {t.id} | {t.account} | {t.type} | {t.currency_pair} | {t.status} | "
            f"amount={t.amount} | price={t.price} | left={t.left} | filled_total={t.filled_total} | "
            f"fill_price={t.fill_price} | fee={t.fee} {t.fee_currency}")
    except Exception as e:
        debugger(e)
        raise

    else:
        return order
